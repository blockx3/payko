// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  nickname      String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserWallet   UserWallet[]
  initalized   Boolean        @default(false)
  transactions transactions[]
  payment_id   payment_id[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Chain {
  SOLANA
}

model UserWallet {
  id                   String   @id @default(cuid()) // Wallet ID    
  walletname           String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id])
  chain                Chain
  publicKey            String
  privateKey           String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  salt_for_pin         String?
  nonce_for_encryption String?
}

model SupportedTokens {
  id         String   @id @default(cuid())
  chain      Chain
  decimal    Int
  token_mint String
  symbol     String
  name       String
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum transaction_type {
  NFT
  NATIVECOIN
  TOKEN
}

model transactions {
  id                    String           @id @default(cuid())
  chain                 Chain
  transection_type      transaction_type
  mint_address          String?
  from                  String
  to                    String
  amount                Float
  transaction_signature String
  user                  User             @relation(fields: [userId], references: [id])
  userId                String
}

model payment_id {
  id              String            @id @default(cuid())
  payment_id      String            @unique
  active          Boolean           @default(false)
  createdAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  payment_details payment_details[]
}

enum payment_type {
  ANY
  NATIVECOIN
  TOKEN
}

enum ammount_type {
  FLEXIBLE
  FIXED
}

model payment_details {
  id                  String             @id @default(cuid())
  createdAt           DateTime           @default(now())
  payment_type        payment_type
  ammount_type        ammount_type
  ammount             Float?
  icon                String?
  title               String?
  description         String?
  payment_id_relation payment_id         @relation(fields: [payment_id], references: [payment_id])
  payment_id          String
  pay_time_details    pay_time_details[]
}

model pay_time_details {
  id                    String          @id @default(cuid())
  pay_id                String
  sweep_wallet_key      String
  createdAt             DateTime        @default(now())
  timeout_minutes       Int
  transaction_signature String?
  success               Boolean         @default(false)
  payment_detail        payment_details @relation(fields: [payment_detail_id], references: [id])
  payment_detail_id     String
}
